{
	"info": {
		"_postman_id": "bf8c653e-d9ef-4061-bf77-fb889de15a67",
		"name": "Tests of Mataffären",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "33840929"
	},
	"item": [
		{
			"name": "Get categories",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Parse the response data",
							"let responseData = pm.response.json();",
							"",
							"// Log the total number of categories found",
							"pm.test(\"Categories are present in the response\", () => {",
							"    pm.expect(responseData).to.have.property('children');",
							"    console.log(\"Total categories found:\", responseData.children.length);",
							"});",
							"",
							"// Check that the status code is 200",
							"pm.test('The status code of the response should be 200', () => {",
							"    pm.expect(pm.response).to.have.status(200);",
							"});",
							"",
							"// Check that the response time is below 1 second",
							"pm.test('The response time should be below 2 second', () => {",
							"    pm.expect(pm.response.responseTime).to.be.below(2000);",
							"});",
							"",
							"// Check that there are at least 15 main categories",
							"pm.test('There should be at least 15 main categories', () => {",
							"    pm.expect(responseData.children.length).to.be.at.least(15);",
							"});",
							"",
							"// Check that each main category has both 'title' and 'url'",
							"pm.test('Each main category should have the properties \"title\" and \"url\"', () => {",
							"    for (let category of responseData.children) {",
							"        // Check that both properties exist and are strings",
							"        pm.expect(category).to.have.property('title').that.is.a('string');",
							"        pm.expect(category).to.have.property('url').that.is.a('string');",
							"    }",
							"});",
							"",
							"// Save the response data as an environment variable",
							"pm.environment.set('categoryData', responseData);",
							"",
							"// Initialize the category counter variable",
							"pm.environment.set('categoryCounter', 0);",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.environment.set('domain', 'http://localhost:4000');"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{domain}}/api/leftMenu/categorytree",
					"host": [
						"{{domain}}"
					],
					"path": [
						"api",
						"leftMenu",
						"categorytree"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get productlist within category",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Retrieve category data from environment",
							"let categories = pm.environment.get('categoryData');",
							"let categoryCounter = Number(pm.environment.get('categoryCounter') || 0);",
							"",
							"// Unpack the response data",
							"let responseData = pm.response.json();",
							"",
							"// Retrieve `productsByCategory` from environment or initialize it as an empty object",
							"let PBC = pm.environment.get('productsByCategory');",
							"if (!PBC || typeof PBC !== 'object') {",
							"    PBC = {}; // Initialize as empty object if undefined or not an object",
							"}",
							"",
							"// Retrieve `urlCategoryPart` from environment",
							"let urlCategoryPart = pm.environment.get('urlCategoryPart');",
							"",
							"// Initialize `PBC[urlCategoryPart]` as an object if not already defined",
							"if (!PBC[urlCategoryPart] || typeof PBC[urlCategoryPart] !== 'object') {",
							"    PBC[urlCategoryPart] = {}; // Initialize as an empty object",
							"}",
							"",
							"// Assign the `results` array to `products` in `PBC[urlCategoryPart]`, and ensure it's an array",
							"if (responseData && Array.isArray(responseData.results)) {",
							"    PBC[urlCategoryPart].products = responseData.results;",
							"",
							"   //det blir fel för det stannar på max 100 på vissa kategorier... ",
							"   // console.log(`Number of products found in ${urlCategoryPart}:`, responseData.results.length);",
							"",
							"    // Sort products in ascending and descending order if products exist and have titles",
							"    PBC[urlCategoryPart].aZ = [...PBC[urlCategoryPart].products].filter(item => typeof item.title === 'string')",
							"        .sort((a, b) => a.title.localeCompare(b.title));",
							"    PBC[urlCategoryPart].Za = [...PBC[urlCategoryPart].aZ].reverse();",
							"} else {",
							"    console.error(\"Results array is missing or invalid in the response.\");",
							"    pm.test.skip(\"Skipping test: Results array is invalid or undefined\");",
							"}",
							"",
							"// Save the updated PBC object back to the environment",
							"pm.environment.set('productsByCategory', PBC);",
							"",
							"// Tests",
							"",
							"// Check that the status code is 200 (OK)",
							"pm.test('The status code of the response should be 200', () => {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"// Check that we have a response time of < 1 second (if response time is consistently too high, consider adjusting this threshold)",
							"pm.test('The response time should be below 1 second', () => {",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);",
							"});",
							"",
							"// Check that there is at least one product in this main category",
							"if (responseData && Array.isArray(responseData.results)) {",
							"    pm.test('There should be at least one product in this main category', () => {",
							"        pm.expect(responseData.results.length).to.be.at.least(1);",
							"    });",
							"}",
							"",
							"// Repeat/loop this request until all main categories are processed",
							"if (categories && categories.children && Array.isArray(categories.children) && categories.children[categoryCounter]) {",
							"    pm.execution.setNextRequest('Get productlist within category');",
							"} else {",
							"    // Reset category counter if all categories are processed",
							"    pm.environment.set('categoryCounter', 0);",
							"    console.log(\"All categories processed.\");",
							"}",
							"",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Unpack from JSON all the categories",
							"let categories = pm.environment.get('categoryData');",
							"",
							"// Get the category counter and convert to a number",
							"let categoryCounter = Number(pm.environment.get('categoryCounter') || 0);",
							"",
							"// Check if the current category exists",
							"if (categories && categories.children && Array.isArray(categories.children) && categories.children[categoryCounter]) {",
							"    // Extract the category part of the URL and set it as an environment variable",
							"    let urlCategoryPart = categories.children[categoryCounter].url;",
							"    pm.environment.set('urlCategoryPart', urlCategoryPart);",
							"",
							"    // Increment the category counter for the next request",
							"    pm.environment.set('categoryCounter', categoryCounter + 1);",
							"",
							"    console.log(`Processing category: ${urlCategoryPart}`);",
							"} else {",
							"    console.error(\"Error: categoryCounter is out of range or categories.children is undefined\");",
							"}",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{domain}}/api/c/{{urlCategoryPart}}?size=1000&page=0&sort=topRated",
					"host": [
						"{{domain}}"
					],
					"path": [
						"api",
						"c",
						"{{urlCategoryPart}}"
					],
					"query": [
						{
							"key": "size",
							"value": "1000"
						},
						{
							"key": "page",
							"value": "0"
						},
						{
							"key": "sort",
							"value": "topRated"
						}
					]
				}
			},
			"response": []
		}
	],
	"variable": [
		{
			"key": "categoryIndex",
			"value": ""
		}
	]
}